/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package formulaire;
import static dao.DatabaseService.getConnection;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import models.Utilisateur;
/**
 *
 * @author user
 */
public class AffichageMatch extends javax.swing.JFrame {

    /**
     * Creates new form AffichageMatch
     */
    public AffichageMatch() {
        initComponents();
    }

    public AffichageMatch(Utilisateur u) throws SQLException, ClassNotFoundException{
       
            initComponents();
            con = getConnection();
            u1=u;
            fetch();
            
    
}
    PreparedStatement pst; 
     Connection con;
     ResultSet rs;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        search_btn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new rojeru_san.complementos.RSTableMetro();
        Gid = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        search_btn.setText("Rechercher");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });

        jLabel8.setText("nom du tournoi");

        jTable1.setBackground(new java.awt.Color(102, 0, 51));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Game", "DateDebut", "DateFin", "Players", "Frais", "Price"
            }
        ));
        jTable1.setColorBackgoundHead(new java.awt.Color(102, 0, 51));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(search_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(Gid, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Gid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  private void fetch () {
        try {
            int q;
            long id = u1.getId();
           pst = con.prepareStatement("SELECT * FROM tournois where id_organisateur=?");
           pst.setLong(1, id);
            rs = pst.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            q=rss.getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
            df.setRowCount(0);
            while(rs.next()){
                Vector v2 = new Vector();
                for (int a=1 ; a<=q ;a++) {
                   v2.add(rs.getString("nom"));
                   v2.add(rs.getString("type_jeux"));
                   v2.add(rs.getString("datedebut"));
                   v2.add(rs.getString("datefin"));
                   v2.add(rs.getInt("nombrejoueur"));
                   v2.add(rs.getString("fraisinscription"));
                   v2.add(rs.getString("recompense"));

                }
                df.addRow(v2);
            }
            
            
            
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(CrudTournois.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
  Utilisateur u1;
   

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        try {
            
            String Game_Id=Gid.getSelectedItem().toString();
            pst=con.prepareStatement("SELECT * FROM tournois WHERE id=?");
            pst.setString(1,Game_Id);
            rs=pst.executeQuery();
           ResultSetMetaData rss = rs.getMetaData();
            int q = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
        df.setRowCount(0);

        while (rs.next()) {
            Vector v2 = new Vector();
            v2.add(rs.getString("nom"));
            v2.add(rs.getString("type_jeux"));
            v2.add(rs.getString("datedebut"));
            v2.add(rs.getString("datefin"));
            v2.add(rs.getString("nombrejoueur"));
            v2.add(rs.getString("fraisinscription"));
            v2.add(rs.getString("recompense"));
            df.addRow(v2);
        }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(AjouterJoueur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_search_btnActionPerformed



public class AffichageMatchs {

    /**
     * Récupère les matchups d'un tournoi et les affiche dans un JTable.
     */
    public static void afficherMatchs(Connection con, long idTournoi) throws SQLException {
        // 1. Préparer et exécuter la requête
        String sql = """
            SELECT m.numero_match,
                   j1.username AS joueur1,
                   j2.username AS joueur2
            FROM matchs m
            JOIN joueurs j1 ON m.id_joueur1 = j1.id_joueur
            JOIN joueurs j2 ON m.id_joueur2 = j2.id_joueur
            WHERE m.id_tournoi = ?
            ORDER BY m.numero_match
            """;
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setLong(1, idTournoi);
        ResultSet rs = pst.executeQuery();

        // 2. Construire le modèle de table
        Vector<String> colonnes = new Vector<>();
        colonnes.add("Match");
        colonnes.add("Rencontre");

        Vector<Vector<Object>> donnees = new Vector<>();
        while (rs.next()) {
            Vector<Object> ligne = new Vector<>();
            int num = rs.getInt("numero_match");
            String j1 = rs.getString("joueur1");
            String j2 = rs.getString("joueur2");
            ligne.add(num);
            ligne.add(j1 + " vs " + j2);
            donnees.add(ligne);
        }
        rs.close();
        pst.close();

        // 3. Créer et configurer le JTable
        DefaultTableModel model = new DefaultTableModel(donnees, colonnes) {
            // Empêcher l'édition des cellules
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable table = new JTable(model);
        table.setFillsViewportHeight(true);

        // 4. Mettre dans une fenêtre
        JFrame frame = new JFrame("Matchs du tournoi " + idTournoi);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.add(new JScrollPane(table));
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    // Exemple d'appel depuis main
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/ta_base", "utilisateur", "motdepasse"
                );
                long idTournoi = 5;  // à adapter
                afficherMatchs(con, idTournoi);
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erreur SQL : " + e.getMessage());
            }
        });
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AffichageMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AffichageMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AffichageMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AffichageMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AffichageMatch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Gid;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private rojeru_san.complementos.RSTableMetro jTable1;
    private javax.swing.JButton search_btn;
    // End of variables declaration//GEN-END:variables
}
