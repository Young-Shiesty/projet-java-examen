/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package formulaire;

import static dao.DatabaseService.getConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.DashBoardOrganisateur;
import models.Utilisateur;

/**
 *
 * @author user
 */
public class ResultatMatch extends javax.swing.JFrame {

    /**
     * Creates new form ResultatMatch
     */
    public ResultatMatch() {
        initComponents();
    }
    
    public ResultatMatch(Utilisateur u,long t) throws SQLException, ClassNotFoundException {
        initComponents();
         this.u1=u;
         this.t1=t;
        con = getConnection();
        fetch2();
        if(CompterMatch(con,1,t1)==1){
            apply_match1.setVisible(false);
        }
        if(CompterMatch(con,2,t1)==1){
            apply_match2.setVisible(false);   
        }
        if(CompterMatch(con,3,t1)==1){
            apply_match3.setVisible(false);
        }
        if(CompterMatch(con,4,t1)==1){
            apply_match4.setVisible(false);
        }
        
         if(CompterMatch(con,1,t1)==0 || CompterMatch(con,2,t1)==0 || CompterMatch(con,3,t1)==0 || CompterMatch(con,4,t1)==0){
            nextround.setVisible(false);
        }else{
             nextround.setVisible(true);
         }
        
    }
     Utilisateur u1;
    long t1;
     ResultSet rs;
    Connection con;
    PreparedStatement pst;
     private void fetch2 () {
         try {
            int q;
            long id=t1;
            pst = con.prepareStatement("SELECT id_joueur1,id_joueur2,numero_match FROM matchs WHERE id_tournois = ?");
            pst.setLong(1,id);
            rs = pst.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            q=rss.getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)tableaumatchmaking.getModel();
            df.setRowCount(0);
            while(rs.next()){
                Vector v2 = new Vector();
                for (int a=1 ; a<=q ;a++) {
                   v2.add(rs.getString("id_joueur1"));
                   v2.add(rs.getString("id_joueur2"));
                   v2.add(rs.getString("numero_match"));
                }
                df.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ListeJoueurs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableaumatchmaking = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        score_p1 = new javax.swing.JTextField();
        apply_match1 = new javax.swing.JButton();
        score_p2 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        score_p3 = new javax.swing.JTextField();
        apply_match2 = new javax.swing.JButton();
        score_p4 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        score_p5 = new javax.swing.JTextField();
        apply_match3 = new javax.swing.JButton();
        score_p6 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        score_p7 = new javax.swing.JTextField();
        apply_match4 = new javax.swing.JButton();
        score_p8 = new javax.swing.JTextField();
        nextround = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableaumatchmaking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Player1       vs", "Player2", "Match"
            }
        ));
        tableaumatchmaking.setFocusable(false);
        tableaumatchmaking.setSelectionBackground(new java.awt.Color(255, 0, 0));
        tableaumatchmaking.setShowHorizontalLines(true);
        tableaumatchmaking.setShowVerticalLines(true);
        tableaumatchmaking.getTableHeader().setResizingAllowed(false);
        jScrollPane2.setViewportView(tableaumatchmaking);

        jLabel1.setText("Match 1 selectionner gagnant:");

        jLabel2.setText("SCORE:");

        score_p1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p1ActionPerformed(evt);
            }
        });

        apply_match1.setText("Apply");
        apply_match1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apply_match1ActionPerformed(evt);
            }
        });

        score_p2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(24, 24, 24)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(score_p1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(score_p2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(apply_match1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(score_p1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apply_match1)
                    .addComponent(score_p2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel9.setText("P1           P2");

        jLabel10.setText("Match 2 selectionner gagnant:");

        jLabel11.setText("SCORE:");

        score_p3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p3ActionPerformed(evt);
            }
        });

        apply_match2.setText("Apply");
        apply_match2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apply_match2ActionPerformed(evt);
            }
        });

        score_p4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(24, 24, 24)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(score_p3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(score_p4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(apply_match2)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(score_p3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apply_match2)
                    .addComponent(score_p4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel12.setText("Match 3 selectionner gagnant:");

        jLabel13.setText("SCORE:");

        score_p5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p5ActionPerformed(evt);
            }
        });

        apply_match3.setText("Apply");
        apply_match3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apply_match3ActionPerformed(evt);
            }
        });

        score_p6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(score_p5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(score_p6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(apply_match3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(score_p5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apply_match3)
                    .addComponent(score_p6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel14.setText("Match 4 selectionner gagnant:");

        jLabel15.setText("SCORE:");

        score_p7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p7ActionPerformed(evt);
            }
        });

        apply_match4.setText("Apply");
        apply_match4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apply_match4ActionPerformed(evt);
            }
        });

        score_p8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score_p8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(score_p7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(score_p8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(apply_match4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(score_p7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apply_match4)
                    .addComponent(score_p8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        nextround.setText("NEXT ROUND");
        nextround.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextroundActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setFont(new java.awt.Font("Snap ITC", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("BACK TO MENU");
        jButton1.setBorder(null);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 99, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(nextround, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(nextround, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void score_p1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p1ActionPerformed

    
    public static int CompterMatch(Connection con, long id, long t1) throws SQLException {
               PreparedStatement pst;
               ResultSet rs;           
    int total = 0;
    long id_tournois=t1; 
    pst = con.prepareStatement("SELECT COUNT(*) AS total_matchs FROM scores WHERE id_match = ? AND id_tournois = ?");
    pst.setLong(1, id); 
    pst.setLong(2, id_tournois); 
    rs = pst.executeQuery();
    if (rs.next()) {
        total = rs.getInt("total_matchs");
    }
    return total;
}
    private void apply_match1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apply_match1ActionPerformed
       try {
    long gagnant;
    String score_1 = score_p1.getText().trim();
    String score_2 = score_p2.getText().trim();
    if (!score_1.matches("\\d+") || !score_2.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Veuillez saisir uniquement des chiffres pour les scores.");
        return;
    }
    
    long score_11 = Long.parseLong(score_1);
    long score_22 = Long.parseLong(score_2);

    if (score_11 < 0 || score_22<0) {
            JOptionPane.showMessageDialog(this, "Pas de negatif.");
            return;
    }
    
    if (score_11 == score_22) {
        JOptionPane.showMessageDialog(this, "Pas de match nul.");
        return;
    }

    long id_match = 1; 
    long id_tournois=t1; 

    pst = con.prepareStatement("SELECT id_joueur1, id_joueur2 FROM matchs WHERE numero_match = 1 AND id_tournois = ?");
    pst.setLong(1, id_tournois); 
    rs = pst.executeQuery();

    if (rs.next()) {
        long id_j1 = rs.getLong("id_joueur1");
        long id_j2 = rs.getLong("id_joueur2");

        if (score_11 > score_22) {
            gagnant = id_j1;
        } else {
            gagnant = id_j2;
        }

        JOptionPane.showMessageDialog(this, "Le gagnant est le joueur avec l'ID : " + gagnant);
        PreparedStatement pstInsert = con.prepareStatement(
            "INSERT INTO scores (id_match, id_gagnant, score_joueur1, score_joueur2, id_tournois) VALUES (?, ?, ?, ?, ?)"
        );
        pstInsert.setLong(1, id_match);
        pstInsert.setLong(2, gagnant);
        pstInsert.setLong(3, score_11);
        pstInsert.setLong(4, score_22);
        pstInsert.setLong(5, id_tournois);
        pstInsert.executeUpdate();
        pstInsert.close();

        JOptionPane.showMessageDialog(this, "Score enregistré avec succès.");
        apply_match1.setVisible(false);   
        
    } else {
        JOptionPane.showMessageDialog(this, "Aucun match trouvé.");
    }

    rs.close();
    pst.close();

} catch (SQLException ex) {
    Logger.getLogger(ResultatMatch.class.getName()).log(Level.SEVERE, null, ex);
}
 
        

        
    }//GEN-LAST:event_apply_match1ActionPerformed

    private void score_p2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p2ActionPerformed

    private void score_p3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p3ActionPerformed

    private void apply_match2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apply_match2ActionPerformed
        // TODO add your handling code here:
         try {
    long gagnant;
    String score_3 = score_p3.getText().trim();
    String score_4 = score_p4.getText().trim();
    if (!score_3.matches("\\d+") || !score_4.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Veuillez saisir uniquement des chiffres pour les scores.");
        return;
    }
    
    long score_33 = Long.parseLong(score_3);
    long score_44 = Long.parseLong(score_4);

    if (score_33 < 0 || score_44<0) {
            JOptionPane.showMessageDialog(this, "Pas de negatif.");
            return;
    }
    
    if (score_33 == score_44) {
        JOptionPane.showMessageDialog(this, "Pas de match nul.");
        return;
    }

    long id_match = 2; 
    long id_tournois=t1; 

    pst = con.prepareStatement("SELECT id_joueur1, id_joueur2 FROM matchs WHERE numero_match = 2 AND id_tournois=?");
    pst.setLong(1, id_tournois); 
    rs = pst.executeQuery();

    if (rs.next()) {
        long id_j3 = rs.getLong("id_joueur1");
        long id_j4 = rs.getLong("id_joueur2");

        if (score_33 > score_44) {
            gagnant = id_j3;
        } else {
            gagnant = id_j4;
        }

        JOptionPane.showMessageDialog(this, "Le gagnant est le joueur avec l'ID : " + gagnant);
        PreparedStatement pstInsert = con.prepareStatement("INSERT INTO scores (id_match, id_gagnant, score_joueur1, score_joueur2, id_tournois) VALUES (?, ?, ?, ?, ?)");
        pstInsert.setLong(1, id_match);
        pstInsert.setLong(2, gagnant);
        pstInsert.setLong(3, score_33);
        pstInsert.setLong(4, score_44);
        pstInsert.setLong(5, id_tournois);
        pstInsert.executeUpdate();
        pstInsert.close();

        JOptionPane.showMessageDialog(this, "Score enregistré avec succès.");
        apply_match2.setVisible(false);   
        
    } else {
        JOptionPane.showMessageDialog(this, "Aucun match trouvé.");
    }
         } catch (SQLException ex) {
    Logger.getLogger(ResultatMatch.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_apply_match2ActionPerformed

    private void score_p4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p4ActionPerformed

    private void score_p5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p5ActionPerformed

    private void apply_match3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apply_match3ActionPerformed
        // TODO add your handling code here:
        try {
    long gagnant;
    String score_5 = score_p5.getText().trim();
    String score_6 = score_p6.getText().trim();
    if (!score_5.matches("\\d+") || !score_6.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Veuillez saisir uniquement des chiffres pour les scores.");
        return;
    }
    
    long score_55 = Long.parseLong(score_5);
    long score_66 = Long.parseLong(score_6);

    if (score_55 < 0 || score_66<0) {
            JOptionPane.showMessageDialog(this, "Pas de negatif.");
            return;
    }
    
    if (score_55 == score_66) {
        JOptionPane.showMessageDialog(this, "Pas de match nul.");
        return;
    }

    long id_match = 3; 
    long id_tournois=t1; 

    pst = con.prepareStatement("SELECT id_joueur1, id_joueur2 FROM matchs WHERE numero_match = 3 AND id_tournois = ?");
    pst.setLong(1, id_tournois); 
    rs = pst.executeQuery();

    if (rs.next()) {
        long id_j5 = rs.getLong("id_joueur1");
        long id_j6 = rs.getLong("id_joueur2");

        if(score_55 > score_66) {
            gagnant = id_j5;
        } else {
            gagnant = id_j6;
        }

        JOptionPane.showMessageDialog(this, "Le gagnant est le joueur avec l'ID : " + gagnant);
        PreparedStatement pstInsert = con.prepareStatement("INSERT INTO scores (id_match, id_gagnant, score_joueur1, score_joueur2, id_tournois) VALUES (?, ?, ?, ?, ?)");
        pstInsert.setLong(1, id_match);
        pstInsert.setLong(2, gagnant);
        pstInsert.setLong(3, score_55);
        pstInsert.setLong(4, score_66);
        pstInsert.setLong(5, id_tournois);
        pstInsert.executeUpdate();
        pstInsert.close();

        JOptionPane.showMessageDialog(this, "Score enregistré avec succès.");
        apply_match3.setVisible(false);   
        
    } else {
        JOptionPane.showMessageDialog(this, "Aucun match trouvé.");
    }
         } catch (SQLException ex) {
    Logger.getLogger(ResultatMatch.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_apply_match3ActionPerformed

    private void score_p6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p6ActionPerformed

    private void score_p7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p7ActionPerformed

    private void apply_match4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apply_match4ActionPerformed
        // TODO add your handling code here:
        try {
    long gagnant;
    String score_7 = score_p7.getText().trim();
    String score_8 = score_p8.getText().trim();
    if (!score_7.matches("\\d+") || !score_8.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Veuillez saisir uniquement des chiffres pour les scores.");
        return;
    }
    
    long score_77 = Long.parseLong(score_7);
    long score_88 = Long.parseLong(score_8);

    if (score_77 < 0 || score_88<0) {
            JOptionPane.showMessageDialog(this, "Pas de negatif.");
            return;
    }
    
    if (score_77 == score_88) {
        JOptionPane.showMessageDialog(this, "Pas de match nul.");
        return;
    }

    long id_match = 4; 
    long id_tournois=t1; 

    pst = con.prepareStatement("SELECT id_joueur1, id_joueur2 FROM matchs WHERE numero_match = 4 AND id_tournois=?");
    pst.setLong(1, id_tournois); 
    rs = pst.executeQuery();

    if (rs.next()) {
        long id_j7 = rs.getLong("id_joueur1");
        long id_j8 = rs.getLong("id_joueur2");

        if (score_77 > score_88){
            gagnant = id_j7;
        } else {
            gagnant = id_j8;
        }

        JOptionPane.showMessageDialog(this, "Le gagnant est le joueur avec l'ID : " + gagnant);
        PreparedStatement pstInsert = con.prepareStatement("INSERT INTO scores (id_match, id_gagnant, score_joueur1, score_joueur2, id_tournois) VALUES (?, ?, ?, ?, ?)");
        pstInsert.setLong(1, id_match);
        pstInsert.setLong(2, gagnant);
        pstInsert.setLong(3, score_77);
        pstInsert.setLong(4, score_88);
        pstInsert.setLong(5, id_tournois);
        pstInsert.executeUpdate();
        pstInsert.close();

        JOptionPane.showMessageDialog(this, "Score enregistré avec succès.");
        apply_match4.setVisible(false);   
        nextround.setVisible(true);

        
    } else {
        JOptionPane.showMessageDialog(this, "Aucun match trouvé.");
    }
         } catch (SQLException ex) {
    Logger.getLogger(ResultatMatch.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_apply_match4ActionPerformed

    private void score_p8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score_p8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score_p8ActionPerformed

    
    
    private void nextroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextroundActionPerformed
        try {
            // TODO add your handling code here:
            this.setVisible(false);
            new DemieFinal(u1,t1).setVisible(true);
        } catch (SQLException ex){
            Logger.getLogger(ResultatMatch.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ResultatMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_nextroundActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            this.setVisible(false);
            new DashBoardOrganisateur(u1).setVisible(true);
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(CrudTournois.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrudTournois.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultatMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultatMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultatMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultatMatch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultatMatch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply_match1;
    private javax.swing.JButton apply_match2;
    private javax.swing.JButton apply_match3;
    private javax.swing.JButton apply_match4;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextround;
    private javax.swing.JTextField score_p1;
    private javax.swing.JTextField score_p2;
    private javax.swing.JTextField score_p3;
    private javax.swing.JTextField score_p4;
    private javax.swing.JTextField score_p5;
    private javax.swing.JTextField score_p6;
    private javax.swing.JTextField score_p7;
    private javax.swing.JTextField score_p8;
    private javax.swing.JTable tableaumatchmaking;
    // End of variables declaration//GEN-END:variables
}
